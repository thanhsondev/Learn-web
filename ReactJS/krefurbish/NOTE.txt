Component summary:
  Components describe a part of the user interface
  They are reusable and can be nested inside other components.

Component type: 
    Stateless Functional Component (SFC)
      JavaScript Functions: Input = props, Output = UI (HTML JSX)
      For example:
        function Welcome(props) {
          return <h1>Hello, {props.name}</h1>;
        }
    
    Stateful Class Component
      Class extending Component class: Input = props, Output = UI (HTML JSX)
      Render method returning HTML
      For example:
        class Welcome extends React.Component {
          render() {
            return <h1>Hello, {this.props.name}</h1>;
          }
        }


Props
    Props get passed to the component
    Function parameters
    Orios are immutable
    Props - Functional Components
    this.props - Class Components

State
    State is managed within the component
    Variables declared in the function body
    Can be changed
    useState Hook - Functional Components
    this.state - Class Components

Bind
    this keyword is undefined
    Bind the event handler to this
    For example:
      <button onClick={this.clickHandler.bind(this)}>Click</button>
    Bind in the constructor
    For example:
      this.clickHandler = this.clickHandler.bind(this);
    Arrow functions in Class Properties
    For example:
      clickHandler = () => {
        this.setState({
          message: 'Goodbye!'
        })
      }

Conditional Rendering
  1. if/else
  2. Element variables
  3. Ternary conditional operator
  4. Short circuit operator

Lists and Keys
  Keys
    A "key" is a special string attribute you need to include when creating lists of elements.
    Keys give the elements a stable identity.
    Keys help React identify which items have changed, are added, or are removed.
    Help in efficient update of the user interface.
  Lists
    A list is a collection of items.
    Render lists using map() function.
    For example:
      const names = ['Bruce', 'Clark', 'Diana']
      const nameList = names.map(name => <h2>{name}</h2>)
      return <div>{nameList}</div>
  Index as Key Anti-pattern
    For example:
      const nameList = names.map((name, index) => <h2 key={index}>{index} {name}</h2>)
    Not recommended to use index as key
    Only use when:
      1. Items in your list do not have a unique id
      2. The list is a static list and will not change
      3. The list will never be reordered or filtered

Pure Component
  Regular Component
    Renders when parent renders
    Renders when component state changes
    Renders when parent state changes
    Renders when forceUpdate() is called
  Pure Component
    Renders when parent renders
    Renders when component state changes
    Does not render when parent state changes
    Does not render when forceUpdate() is called
    For example:
      class PureComp extends PureComponent {
        render() {
          console.log('Pure Component Render')
          return (
            <div>
              Pure Component {this.props.name}
            </div>
          )
        }
      }

Shallow Comparison (SC)
  Primitive Types
    SC checks if the values are the same
    a (SC) b => true if a and b have the same value and are of the same type
    For example:
      string a = 'hello' (SC) string b = 'hello' => true
  Complex Types
    SC checks if the references to the objects are the same
    a (SC) b => true if a and b reference the exact same object
    For example:
      var a = [1,2,3]
      var b = [1,2,3]
      var c = a;

      var ab_eq = (a === b) => false // different objects
      var ac_eq = (a === c) => true // same object